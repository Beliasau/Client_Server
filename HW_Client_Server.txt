HW
Client_Server
1) Прочиать про клиент-серверную архитектуру
2) Что такое HTTP и HTTPS
3) HTTP методы
4) HTTP статус коды сервера
5) Что такое ядро браузера 
6) Какие браузеры какие ядра используют
7) Что такое API
8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Идентификация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октеты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов

=============================================================


1)		Клиент-серверная архитектура

	Клиент (заказчик услуг) - программа или локальный компьютер, который отправляет на сервер запросы
 и получает от него ответы
	Сервер (поставщик услуг)- программа или локальный компьютер, который получает запрос от клиента
обрабатывает его и отправляет ответ обратно
	Клиент-серверная архитектура- архитектура в которой вычеслительная или сетевая нагрузка распределяется
 между клиентом и сервером
	Толстый клиент- клиент на котором происходит все вычеслительные процессы, сервер нужен только для 
сохранения основной информации(1С-бухгалтерия, онлайн игры)
	Тонкий клиент- все вычесления происходят на сервере(браузер)



2)		HTTP и HTTPS
	HTTP (hyper text transfer protocol)- протокол прикладного уровня для передачи данных (текстовой информации
или других данных зашифрованых в текстовом формате)
	HTTPS (HTTP Secure)- протокол для передачи конфиденциальной информации путем ее шифрования
Структура HTTP/S запроса:
1)HTTP метод/ путь/ версия HTTP протокола
2)заголовок(HEADERS)
3)тело запроса
GET /tutorials/other/top-20-mysql-best-practices/ HTTP/1.1

Структура HTTP/S ответа
1)версия HTTP протокола   статус код    статус message
2)HEADERS HTTP/s
3)тело ответа




3)		HTTP методы
Методы показывают какое желаемое действие выполнится для данног ресурса
	Методы бывают: безопасные, кэшируемые, идемпотентные
Безопасные- не меняют состояния сервера проводят операции, только чтение(все безопасные методы идемпотентны)
	GET. Head. Opnions
Кэшируемые- это ответы HTTP, которые могут быть сохранены для дальнейшего использования позже
Идемпотентные- методы при которых один и от же запрос имеет один итот же ответ, не меняя состояния сервера
	Методы:
GET- извлекает данные
Head- работает как и Get, но без тела ответа
Post- для отправки информации на сервер
Put- заменяет все текущие данные ресурса, данными запроса
Delete- удаляет указанный ресурс (информацию)
Options
Trace
Patch- частичное изменение ресурса




4)		HTTP статус коды сервера
Статус код- часть первой строке ответа от сервера при запросах по HTTP протоколу
1**		Информационные ()
100-199
2**		Успешные(Succes)
200-299
3**		Перенаправления(Redirection)
300-399
4**		Ошибка на стороне клиента(client error)
400-499
5**		Ошибка на стороне сервера(Server error)
500-599






5)		ядро браузера 
Браузер=оболочка + ядро
Оболочка- пользовательский интерфейс для настройки работы
Ядро(движок)- программа или модуль, отображает контент на основе языка разметки и выводит его на экран 






6) 		Какие браузеры какие ядра используют

	ядро Blink (от Google)
1 Chromium
2 Brave
3 Chrome
4 Comodo Dragon
5 Microsoft Edge
6 Epic Browser
7 Opera
8 SRWare Iron
9 Яндекс.Браузер
10 Амиго

	на движке Gecko (Mozilla)
1)Flock
2)K-Meleon
3)SeaMonkey
4)Camino
5)Mozilla Firefox
6)Waterfox

	Webkit (от Apple)
Apple Safari





7)		API
API(application programm interface) програмный интерфейс приложений
контракт по которому общаются между собой различные ПО, и определяет каким образом они будут общаться 
используя запросы и ответы 






8)		ендпоинты
Endpoint- точка приема запроса на стороне сервера(API)
Route(маршрут)- URL к которому можно обратится разными HTTP методами. Маршрут может иметь несколько эндпоинтов






9)		URL (URI, URL, URN) универсальный указатель
URL(Uniform Resurs Locator)- указывает на место расположения в сети интернет
URN(Uniform Resurs Name)- указывает имя файла или ресурса в сети
URI(Uniform Resurs Identfier)- указывает и имя файла и его адрес
URI=URL+URN
Структуру URL
протокол(HTTP или HTTPS)//(хост или IP адрес):(номер порта)/(путь)?(параметр запроса)#(якорь)
протокол и хост обязательны 




10-11)		Смотри в №3




12)		 Идентификация, Аутентификация, Авторизация
Идентификация- процесс выявления или определения уникального идентификатора, обьекта или пользователя, и сравнением 
его с уже имеющемися в системе(два одинаковых идентификатора не должно существоать)
ПРИМЕР ввод логина в систему
Аутентификация- процесс проверки подленности идентифицированного пользователя или обекта
ПРИМЕР ввод пароля в систему 
ввод кода из СМС или почтового ящика (2х факторная аутентификация)
Авторизация- процесс предоставления пользователю или группе пользователей прав доступа к системе
или выполнению ими определенных действий(чтение или удаление файлов)




13) 		Что такое IP
Уникальный сетевой адрес(уникальный номер) узла(каждого устройства) в компьютерной сети построенный попротоколу IP





14) 		Что такое октеты в DNS
DNS(Domain Name Sistem) технология, которая позволяет получить IP сайта через запрос клиента с доменным именем.
клиент отправляет запрос с доменным именем ресурса на DNS сервер, DNS возвращает ответ уже с IP адресом ресурса,
после чего клиент уже обращается по этому адресу

	Структура пакета DNS

    +---------------------+
    |        Header       | Заголовок
    +---------------------+
    |       Question      | Секция запросов
    +---------------------+
    |        Answer       | Секция ответа
    +---------------------+
    |      Authority      | Секция ответа об уполномоченных серверах
    +---------------------+
    |      Additional     | Секция ответа дополнительных записей
    +---------------------+
Header — Заголовок DNS пакета, состоящий из 12 октет.
Question section — в этой секции DNS-клиент передает запросы DNS-серверу сообщая о том,
для какого имени необходимо разрешить (зарезолвить) запись DNS
Answer section — сервер сообщает клиенту ответ или несколько ответов на запрос, 
в котором сообщает вышеуказанные данные.
Authoritative Section — содержит сведения о том, с помощью каких авторитетных серверов 
было получена информация включенная в секцию DNS-ответа.
Additional Record Section — дополнительные записи, которые относятся к запросу, 
но не являются строго ответами на вопрос.
Записей в секциях может быть как несколько, так и не быть вообще. Всё определяется заголовком.
IP-адрес состоит из четырех частей, записаных в виде десятичных чисел с точками,
каждую из этих четырех частей называют ОКТЕТОМ. Октет представляет собой 8 двоичных цифр
или 3 в десятичном виде





15)		 Что такое порт, сколько портов у Linux сервера
Логический номер программы, которая обслуживает интернет соединение на прикрепленном адресе IP
1порт -1 программма  
Системные порты   0-1023
пользовательские  1024-49151
динамические(частные)   49152-65535






16) 		Уровни OSI
Прикладной (application)		HTTP,FTP,POP3,WebSocket,SMTP.TFTP
взаимосвязь приложений на компьютере с внешней сетью
данные

Представления (presentation)		ASCII,EBCDIC,JPEG,MIDI
преобразование форматов данных (сжатие и кодирование)
данные

Сеансовый (session)			RPC,PAP,gRPC,SMPP
обмен данными, синхронизация
организация сеансов связи между приложениями на компьютер
данные

транспортный (transport)		TCP,UDP,SCTP
доставка информации по каналам внешней связи между конечными пунктами
сегменты

сетевой (network)			IPv4,IPv6,IPsec,
пакеты
появляется пакет данных в который вставляется IP адрес от DNS сервера
роутер, маршрутизатор

канальный (data link)			EThernet,DSL,ARP
(LLC/MAC) проверка и исправление погрешности передачи
кадры
сетевой мост, коммутатор, точка доступа

физический (physical)			Ethernet,USB,WI-fi,bluetooth
радиосигналы, электрические и оптические сигналы
витая пара, кодирование 0 и 1, провода
биты






17)		 Хедеры (заголовки) http запросов
в HEADERS содержится служебная информация(информация о хосте, пользователе, инф. для авторизации и тд),
 и не видна для пользователя 
HEADERS содержит информацию в формате (ключ: значение)
ПРИМЕР:

Transfer-Encoding: chunked
Date: Sat, 28 Nov 2009 04:36:25 GMT
Server: LiteSpeed
Connection: close
X-Powered-By: W3 Total Cache/0.8
Pragma: public
Expires: Sat, 28 Nov 2009 05:36:25 GMT
Etag: "pub1259380237;gz"
Cache-Control: max-age=3600, public
Content-Type: text/html; charset=UTF-8
Last-Modified: Sat, 28 Nov 2009 03:50:37 GMT
X-Pingback: https://net.tutsplus.com/xmlrpc.php
Content-Encoding: gzip
Vary: Accept-Encoding, Cookie, User-Agent

после HEADERS идет тело HTTP/S протокола и они разделены пустой строкой